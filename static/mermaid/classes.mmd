classDiagram
  class AsyncClientEndpoint {
    MODEL
    endpoint
    workspace_id
    add(body: ClientBody) TogglClient
    collect(body: ClientBody | None) list[TogglClient]
    delete(client: TogglClient | int) None
    edit(client: TogglClient | int, body: ClientBody) TogglClient
    get(client_id: int | TogglClient) TogglClient | None
  }
  class AsyncDetailedReportEndpoint {
    endpoint
    export_report(body: ReportBody, extension: ReportFormats, pagination: PaginationOptions | None) PaginatedResult[bytes]
    search_time_entries(body: ReportBody, pagination: PaginationOptions | None) PaginatedResult[list[dict[str, Any]]]
    totals_report(body: ReportBody) dict[str, int]
  }
  class AsyncOrganizationEndpoint {
    MODEL
    add(name: str, workspace_name: str) TogglOrganization
    collect() list[TogglOrganization]
    delete(organization: TogglOrganization | int) None
    edit(organization: TogglOrganization | int, name: str) TogglOrganization
    get(organization: TogglOrganization | int) TogglOrganization | None
  }
  class AsyncProjectEndpoint {
    BASIC_COLORS : Final[dict[str, str]]
    MODEL
    endpoint
    workspace_id
    add(body: ProjectBody) TogglProject
    collect(body: ProjectBody | None) list[TogglProject]
    delete(project: TogglProject | int) None
    edit(project: TogglProject | int, body: ProjectBody) TogglProject
    get(project_id: int | TogglProject) TogglProject | None
    get_color(name: str) str
    get_color_id(color: str) int
    status_to_query(status: TogglProject.Status, statement: Select[Any]) Select[Any]
  }
  class AsyncReportEndpoint {
    BASE_ENDPOINT : ClassVar[URL]
    workspace_id
    export_report(body: ReportBody)* Any
    search_time_entries(body: ReportBody)* Any
  }
  class AsyncSqliteCache {
    cache_path
    database
    metadata
    add() None
    delete() None
    find(pk: int) T | None
    load() list[T]
    update() None
  }
  class AsyncSummaryReportEndpoint {
    endpoint
    export_report(body: ReportBody, extension: ReportFormats) bytes
    project_summaries(start_date: date | str, end_date: date | str) list[dict[str, int]]
    project_summary(project: TogglProject | int, start_date: date | str, end_date: date | str) dict[str, int]
    search_time_entries(body: ReportBody) list[dict[str, int]]
  }
  class AsyncTagEndpoint {
    MODEL
    endpoint
    workspace_id
    add(name: str) TogglTag
    collect() list[TogglTag]
    delete(tag: TogglTag | int) None
    edit(tag: TogglTag | int, name: str) TogglTag
    get(tag: TogglTag | int) TogglTag | None
  }
  class AsyncTrackerEndpoint {
    MODEL
    TRACKER_ALREADY_STOPPED : Final[int]
    TRACKER_NOT_RUNNING : Final[int]
    endpoint
    workspace_id
    add(body: TrackerBody) TogglTracker
    bulk_edit() Edits
    collect(since: int | datetime | None, before: date | None, start_date: date | None, end_date: date | None) list[TogglTracker]
    current() TogglTracker | None
    delete(tracker: TogglTracker | int) None
    edit(tracker: TogglTracker | int, body: TrackerBody) TogglTracker
    get(tracker_id: int | TogglTracker) TogglTracker | None
    stop(tracker: TogglTracker | int) TogglTracker | None
  }
  class AsyncUserEndpoint {
    get_details() dict[str, Any]
  }
  class AsyncWeeklyReportEndpoint {
    endpoint
    export_report(body: ReportBody, extension: ReportFormats) bytes
    search_time_entries(body: ReportBody) list[dict[str, Any]]
  }
  class AsyncWorkspaceEndpoint {
    MODEL
    organization_id
    add(body: WorkspaceBody) TogglWorkspace
    collect(since: datetime | int | None) list[TogglWorkspace]
    edit(workspace_id: TogglWorkspace | int, body: WorkspaceBody) TogglWorkspace
    get(workspace: TogglWorkspace | int) TogglWorkspace | None
    statistics(workspace_id: TogglWorkspace | int) WorkspaceStatistics
    tracker_constraints(workspace_id: TogglWorkspace | int) dict[str, bool]
  }
  class AuthenticationError {
  }
  class BaseBody {
    format(endpoint: str)* dict[str, Any]
  }
  class BulkEditParameter {
    op : Literal['add', 'remove', 'replace']
    path : str
    value : Any
  }
  class CacheCallable {
  }
  class ClientBody {
    name : str | None
    notes : str | None
    status : CLIENT_STATUS | None
    format(endpoint: str) dict[str, Any]
  }
  class ClientEndpoint {
    MODEL
    endpoint
    workspace_id
    add(body: ClientBody) TogglClient
    collect(body: ClientBody | None) list[TogglClient]
    delete(client: TogglClient | int) None
    edit(client: TogglClient | int, body: ClientBody) TogglClient
    get(client_id: int | TogglClient) TogglClient | None
  }
  class Comparison {
    name
  }
  class CustomDecoder {
    MATCH_DICT : Final[dict[str, type[TogglClass]]]
    decode(obj: Any) Any
  }
  class CustomEncoder {
    default(obj: Any) Any
  }
  class DateTimeError {
  }
  class DetailedReportEndpoint {
    endpoint
    export_report(body: ReportBody, extension: ReportFormats, pagination: PaginationOptions | None) PaginatedResult[bytes]
    search_time_entries(body: ReportBody, pagination: PaginationOptions | None) PaginatedResult[list[dict[str, Any]]]
    totals_report(body: ReportBody) dict[str, int]
  }
  class Edits {
    failures : list[int]
    successes : list[int]
  }
  class InvalidExtensionError {
  }
  class JSONCache {
    cache_path
    parent
    session : JSONSession[T]
    add() None
    commit() None
    delete() None
    find(entry: T | dict[str, int]) T | None
    load() list[T]
    query() list[T]
    save(update: Iterable[T] | T, method: RequestMethod) None
    update() None
  }
  class JSONSession {
    data : list[T]
    max_length : int
    modified : int
    version : str
    commit(path: Path) None
    load(path: Path) None
    process_data(data: list[T]) list[T]
    refresh(path: Path) bool
  }
  class MissingParentError {
  }
  class NamingError {
  }
  class NoCacheAssignedError {
  }
  class OrganizationEndpoint {
    MODEL
    endpoint
    add(name: str, workspace_name: str) TogglOrganization
    collect() list[TogglOrganization]
    delete(organization: TogglOrganization | int) None
    edit(organization: TogglOrganization | int, name: str) TogglOrganization
    get(organization: TogglOrganization | int) TogglOrganization | None
  }
  class PaginatedResult {
    next_id : int | None
    next_row : int | None
    result : T
    next_options(page_size: int) PaginationOptions
  }
  class PaginationOptions {
    next_id : int | None
    next_row : int | None
    page_size : int
  }
  class ProjectBody {
    active : bool | Literal['both']
    client_id : int | None
    client_ids : list[int]
    client_name : str | None
    color : str | None
    end_date : date | None
    group_ids : list[int]
    is_private : bool | None
    name : str | None
    since : date | int | None
    start_date : date | None
    statuses : list[TogglProject.Status]
    user_ids : list[int]
    format(endpoint: str) dict[str, Any]
  }
  class ProjectEndpoint {
    BASIC_COLORS : Final[dict[str, str]]
    MODEL
    endpoint
    workspace_id
    add(body: ProjectBody) TogglProject
    collect(body: ProjectBody | None) list[TogglProject]
    delete(project: TogglProject | int) None
    edit(project: TogglProject | int, body: ProjectBody) TogglProject
    get(project_id: int | TogglProject) TogglProject | None
    get_color(name: str) str
    get_color_id(color: str) int
    status_to_query(status: TogglProject.Status) list[TogglQuery[Any]]
  }
  class ReportBody {
    client_ids : list[int | None]
    date_format : Literal['MM/DD/YYYY', 'DD-MM-YYYY', 'MM-DD-YYYY', 'YYYY-MM-DD', 'DD/MM/YYYY', 'DD.MM.YYYY']
    description : str | None
    duration_format : Literal['classic', 'decimal', 'improved']
    end_date : date | None
    enrich_response : bool
    group_ids : list[int]
    grouped : bool
    grouping : str | None
    include_time_entry_ids : bool
    max_duration_seconds : int | None
    min_duration_seconds : int | None
    order_by : Literal['title', 'duration'] | None
    order_dir : Literal['ASC', 'DESC'] | None
    project_ids : list[int | None]
    resolution : str | None
    rounding : int | None
    rounding_minutes : Literal[0, 1, 5, 6, 10, 12, 15, 30, 60, 240] | None
    start_date : date | None
    sub_grouping : str | None
    tag_ids : list[int | None]
    time_entry_ids : list[int]
    user_ids : list[int]
    format(endpoint: str) dict[str, Any]
  }
  class ReportEndpoint {
    BASE_ENDPOINT : ClassVar[str]
    workspace_id
    export_report(body: ReportBody)* Any
    search_time_entries(body: ReportBody)* Any
  }
  class RequestMethod {
    name
  }
  class SqliteCache {
    cache_path
    database
    metadata
    session
    add() None
    commit() None
    delete() None
    find(query: T | dict[str, Any]) T | None
    load() Query[T]
    query() Query[T]
    update() None
  }
  class Status {
    name
  }
  class SummaryReportEndpoint {
    endpoint
    export_report(body: ReportBody, extension: ReportFormats) bytes
    project_summaries(start_date: date | str, end_date: date | str) list[dict[str, int]]
    project_summary(project: TogglProject | int, start_date: date | str, end_date: date | str) dict[str, int]
    search_time_entries(body: ReportBody) list[dict[str, int]]
  }
  class TagEndpoint {
    MODEL
    endpoint
    workspace_id
    add(name: str) TogglTag
    collect() list[TogglTag]
    delete(tag: TogglTag | int) None
    edit(tag: TogglTag | int, name: str) TogglTag
    get(tag: TogglTag | int) TogglTag | None
  }
  class TogglAsyncCache {
    cache_path
    expire_after
    model
    parent
    add()* None
    delete()* None
    find(pk: int)* T | None
    find_method(method: RequestMethod) Callable[[Any], Awaitable[Any]] | None
    load()* Iterable[T]
    save(entry: list[T] | T, method: RequestMethod) None
    update()* None
  }
  class TogglAsyncCachedEndpoint {
    cache
    load_cache() Iterable[T]
    request(parameters: str, headers: Headers | None, body: dict[str, Any] | list[Any] | None, method: RequestMethod) T | list[T] | Response | None
    save_cache(response: list[T] | T, method: RequestMethod) None
  }
  class TogglAsyncEndpoint {
    BASE_ENDPOINT : ClassVar[URL]
    HEADERS : Final[Headers]
    MODEL : type[T] | None
    client
    re_raise : bool
    retries
    api_status() bool
    process_models(data: list[dict[str, Any]]) list[T]
    request(parameters: str, headers: Headers | None, body: dict[str, Any] | list[dict[str, Any]] | None, method: RequestMethod) T | list[T] | Response | None
  }
  class TogglCache {
    cache_path
    expire_after
    model
    parent
    add()* None
    commit()* None
    delete()* None
    find(entry: TC | dict[str, Any])* TC | None
    find_method(method: RequestMethod) CacheCallable[TC]
    load()* Iterable[TC]
    query()* Iterable[TC]
    save(entry: Iterable[TC] | TC, method: RequestMethod) None
    update()* None
  }
  class TogglCachedEndpoint {
    cache
    load_cache() Iterable[T]
    query() list[T]
    request(parameters: str, headers: Headers | None, body: dict[str, Any] | list[Any] | None, method: RequestMethod) T | list[T] | Response | None
    save_cache(response: list[T] | T, method: RequestMethod) None
  }
  class TogglClass {
    id : int
    name : str
    timestamp : datetime
    from_kwargs()* Self
  }
  class TogglClient {
    from_kwargs() TogglClient
  }
  class TogglEndpoint {
    BASE_ENDPOINT : ClassVar[str]
    HEADERS : Final[Headers]
    MODEL : type[T] | None
    client
    re_raise : bool
    retries
    api_status() bool
    process_models(data: list[dict[str, Any]]) list[T]
    request(parameters: str, headers: Headers | None, body: dict[str, Any] | list[dict[str, Any]] | None, method: RequestMethod) T | list[T] | Response | None
  }
  class TogglOrganization {
    from_kwargs() Self
    validate_name(name: str) None
  }
  class TogglProject {
    active : bool
    client : int | None
    color : str
    end_date : date | None
    start_date : date
    stop_date : date
    from_kwargs() TogglProject
    get_status() TogglProject.Status
  }
  class TogglQuery {
    comparison
    key : str
    value : T | Sequence[T]
  }
  class TogglTag {
    from_kwargs() TogglTag
  }
  class TogglTracker {
    duration : timedelta | None
    project : int | None
    start : datetime
    stop : datetime | str | None
    tags : list[TogglTag]
    from_kwargs() Self
    get_tags() list[TogglTag]
    running() bool
  }
  class TogglWorkspace {
    name : str
    organization : int
    from_kwargs() Self
    validate_name(name: str) None
  }
  class TrackerBody {
    created_with : str
    description : str | None
    duration : int | timedelta | None
    project_id : int | None
    shared_with_user_ids : list[int]
    start : datetime | None
    stop : datetime | None
    tag_action : Literal['add', 'remove'] | None
    tag_ids : list[int]
    tags : list[str]
    format(endpoint: str) dict[str, Any]
  }
  class TrackerEndpoint {
    MODEL
    TRACKER_ALREADY_STOPPED : Final[int]
    TRACKER_NOT_RUNNING : Final[int]
    endpoint
    workspace_id
    add(body: TrackerBody) TogglTracker
    bulk_edit() Edits
    collect(since: int | datetime | None, before: date | None, start_date: date | None, end_date: date | None) list[TogglTracker]
    current() TogglTracker | None
    delete(tracker: TogglTracker | int) None
    edit(tracker: TogglTracker | int, body: TrackerBody) TogglTracker
    get(tracker_id: int | TogglTracker) TogglTracker | None
    stop(tracker: TogglTracker | int) TogglTracker | None
  }
  class UTCDateTime {
    cache_ok : bool
    impl
    process_bind_param(value: datetime | None, _dialect: Dialect) datetime | None
    process_result_value(value: datetime | None, _dialect: Dialect) datetime | None
  }
  class User {
    name : str
    user_id : int
  }
  class UserEndpoint {
    get_details() dict[str, Any]
    verify_authentication(auth: BasicAuth) bool
  }
  class WeeklyReportEndpoint {
    endpoint
    export_report(body: ReportBody, extension: ReportFormats) bytes
    search_time_entries(body: ReportBody) list[dict[str, Any]]
  }
  class WorkspaceBody {
    admins : list[int]
    name : str | None
    only_admins_may_create_projects : bool
    only_admins_may_create_tags : bool
    only_admins_see_billable_rates : bool
    only_admins_see_team_dashboard : bool
    projects_billable_by_default : bool
    projects_enforce_billable : bool
    projects_private_by_default : bool
    rate_change_mode : Literal['start-today', 'override-current', 'override-all'] | None
    reports_collapse : bool
    rounding : int | None
    rounding_minutes : int | None
    format(endpoint: str) dict[str, Any]
  }
  class WorkspaceChild {
    workspace : int
    from_kwargs() Self
  }
  class WorkspaceEndpoint {
    MODEL
    organization_id
    add(body: WorkspaceBody) TogglWorkspace
    collect(since: datetime | int | None) list[TogglWorkspace]
    edit(workspace_id: TogglWorkspace | int, body: WorkspaceBody) TogglWorkspace
    get(workspace: TogglWorkspace | int) TogglWorkspace | None
    statistics(workspace_id: TogglWorkspace | int) WorkspaceStatistics
    tracker_constraints(workspace_id: TogglWorkspace | int) dict[str, bool]
  }
  class WorkspaceMissingError {
  }
  class WorkspaceStatistics {
    admins : list[User]
    groups_count : int
    members_count : int
  }
  ClientBody --|> BaseBody
  ClientEndpoint --|> TogglCachedEndpoint
  OrganizationEndpoint --|> TogglCachedEndpoint
  ProjectBody --|> BaseBody
  ProjectEndpoint --|> TogglCachedEndpoint
  TagEndpoint --|> TogglCachedEndpoint
  TrackerBody --|> BaseBody
  TrackerEndpoint --|> TogglCachedEndpoint
  UserEndpoint --|> TogglEndpoint
  WorkspaceBody --|> BaseBody
  WorkspaceEndpoint --|> TogglCachedEndpoint
  AsyncClientEndpoint --|> TogglAsyncCachedEndpoint
  TogglAsyncCachedEndpoint --|> TogglAsyncEndpoint
  AsyncOrganizationEndpoint --|> TogglAsyncCachedEndpoint
  AsyncProjectEndpoint --|> TogglAsyncCachedEndpoint
  AsyncDetailedReportEndpoint --|> AsyncReportEndpoint
  AsyncReportEndpoint --|> TogglAsyncEndpoint
  AsyncSummaryReportEndpoint --|> AsyncReportEndpoint
  AsyncWeeklyReportEndpoint --|> AsyncReportEndpoint
  AsyncSqliteCache --|> TogglAsyncCache
  AsyncTagEndpoint --|> TogglAsyncCachedEndpoint
  AsyncTrackerEndpoint --|> TogglAsyncCachedEndpoint
  AsyncUserEndpoint --|> TogglAsyncEndpoint
  AsyncWorkspaceEndpoint --|> TogglAsyncCachedEndpoint
  TogglCachedEndpoint --|> TogglEndpoint
  JSONCache --|> TogglCache
  SqliteCache --|> TogglCache
  TogglClient --|> WorkspaceChild
  TogglOrganization --|> TogglClass
  TogglProject --|> WorkspaceChild
  TogglTag --|> WorkspaceChild
  TogglTracker --|> WorkspaceChild
  TogglWorkspace --|> TogglClass
  WorkspaceChild --|> TogglClass
  DetailedReportEndpoint --|> ReportEndpoint
  ReportBody --|> BaseBody
  ReportEndpoint --|> TogglEndpoint
  SummaryReportEndpoint --|> ReportEndpoint
  WeeklyReportEndpoint --|> ReportEndpoint
  Comparison --* TogglQuery : comparison
  TogglClient --* ClientEndpoint : MODEL
  TogglClient --* AsyncClientEndpoint : MODEL
  TogglOrganization --* OrganizationEndpoint : MODEL
  TogglOrganization --* AsyncOrganizationEndpoint : MODEL
  TogglProject --* ProjectEndpoint : MODEL
  TogglProject --* AsyncProjectEndpoint : MODEL
  TogglTag --* TagEndpoint : MODEL
  TogglTag --* AsyncTagEndpoint : MODEL
  TogglTracker --* TrackerEndpoint : MODEL
  TogglTracker --* AsyncTrackerEndpoint : MODEL
  TogglWorkspace --* WorkspaceEndpoint : MODEL
  TogglWorkspace --* AsyncWorkspaceEndpoint : MODEL
